{
    "0": "System Implementation: Fast Search\n \n \nChengXiang\n \n\n \nDepartment of Computer Science\n \nUniversity of Illinois at Urbana\n-\nChampaign\n \n1\n \n",
    "1": "System Implementation: Fast Search\n \n2\n \nBig Text Data\n \nSmall Relevant Data\n \n  \nSearch Engine\n \nRecommender \n \nSystem\n \n2. Text Access\n \n11. Recommendation\n \n3. Text Retrieval Problem\n \n10. Web Search\n \nUser\n \n1. Natural Language Content Analysis\n \n4. Text Retrieval Methods\n \n6. System \n \nImplementation\n \n7. Evaluation\n \n5. Vector Space Model\n \n8. Probabilistic Model \n \n9. Feedback  \n \n",
    "2": "3\n \nHow to Score Documents Quickly \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nWeight a \nmatched\n \nquery term in d\n \nFinal score \nadjustment\n \nWeight \naggregation\n \n \nGeneral Form of  Scoring Function\n \n",
    "3": "4\n \nA General Algorithm for Ranking Documents\n \n\n \n\n\n\n\n\n\n\n\n\n \nare pre\n-\ncomputed\n \n\nMaintain a score accumulator for each \nd\n \nto compute \nh\n \n\nFor each query term \nt\ni\n \n\nFetch the inverted list {(d\n1\n,f\n1\n\nd\nn\n,f\nn\n)}\n \n\nFor each entry (\nd\nj\n,f\nj\n), compute  \ng(\nt\ni\n,d\nj\n,q\n)\n, and update score \naccumulator for doc d\ni \nto incrementally compute \nh\n \n\nAdjust the score to compute \nf\na\n, and sort \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n",
    "4": "5\n \nAn Example: Ranking \nBased \non TF Sum\n \nf(\nd,q\n)=g(t\n1\n\nt\nk\n,d,q\n)   \n         \nwhere  \ng(\nt\ni\n,d,q\n) = c(\nt\ni\n,d\n)\n \n \nQuery\n \n\n\n: \n(d1, 3), (d2, 4), (d3, 1), (d4, 5)\n \n \n \n \n \n    \n \n         \nSecurity\n: (d2, 3), (d4,1), (d5, 3)\n \nAccumulators:  \nd1     d2      \nd3     d4   \n  \nd5\n \n                           \n0         0        0       0        0\n \n        \n(d1,3)  =>   \n3\n   \n      \n0        0       0        0\n \n        \n(d2,4)  =>   3         \n4\n        \n0       0        0\n \n        \n(d3,1)  =>   3         4       \n \n1 \n      \n0        0\n \n        \n(d4,5)  =>   3         4        1      \n \n5 \n       \n0\n \n        \n(d2,3)  =>   3         \n7\n        \n1       5        0\n \n        \n(d4,1)  =>   3         7        1       \n6\n        \n0\n \n        \n(d5,3)  =>   3         7        1        6       \n3\n \n \ninfo\n \nsecurity\n \n",
    "5": "6\n \nFurther Improving Efficiency\n \n\nCaching (e.g., query results, list of inverted index)\n \n \n\nKeep only the most promising accumulators\n \n \n\nScaling up to the Web\n-\nscale? (need parallel \nprocessing)\n \n",
    "6": "Some Text Retrieval Toolkits\n \n\nLucene\n: \nhttp\n://lucene.apache.org\n/\n \n\nLemur/Indri: \nhttp\n://www.lemurproject.org\n/\n \n\nTerrier: \nhttp\n://terrier.org\n/\n \n\nMeTA\n: \nhttp\n://meta\n-\ntoolkit.github.io/meta\n/\n \n\nMore can be found at \nhttp://timan.cs.uiuc.edu/resources\n \n \n \n7\n \n",
    "7": "Summary of System Implementation\n \n\nInverted index and its construction\n \n\nPreprocess data as much as we can\n \n\nCompression when appropriate \n \n\nFast search using inverted index\n \n\nExploit inverted index to accumulate scores for documents matching \na query term\n \n\nExploit \n\n \nlaw to avoid touching many documents not matching \nany query term \n \n\nCan support a wide range of ranking algorithms \n \n\nGreat potential for further scaling up using distributed file \nsystem, parallel processing, and caching  \n \n8\n \n",
    "8": "Additional Readings\n \n\nIan \nH. Witten, Alistair Moffat, Timothy C. Bell:\n \nManaging Gigabytes: Compressing and Indexing \nDocuments and Images, Second Edition. Morgan \nKaufmann, 1999.\n \n\nStefan \nB\u00fcttcher, Charles L. A. Clarke, Gordon V. Cormack:\n \nInformation Retrieval \n-\n \nImplementing and Evaluating \nSearch Engines. MIT \nPress, 2010\n.\n \n9\n \n"
}