/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.illinois.phantom;

import static edu.illinois.phantom.wordparser.Constants.pattern1;
import static edu.illinois.phantom.wordparser.Constants.pattern2;
import static edu.illinois.phantom.wordparser.Constants.pattern3;
import static edu.illinois.phantom.wordparser.Constants.pattern4;
import static edu.illinois.phantom.wordparser.Constants.pattern5;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import edu.illinois.phantom.wordparser.ResumeParser;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;

public class App {

  private static <T> String writeValueAsString(ObjectMapper mapper, T obj) {
    try {
      return mapper.writeValueAsString(obj);
    } catch (JsonProcessingException e) {
      throw new DocParseException("Exception while writing a value as JSON: " + e.getMessage(), e);
    }
  }

  private static boolean textMatchesPattern(final String lowerCaseText) {
    return pattern4.matcher(lowerCaseText).find()
        || pattern3.matcher(lowerCaseText).find()
        || pattern2.matcher(lowerCaseText).find()
        || pattern1.matcher(lowerCaseText).find()
        || pattern5.matcher(lowerCaseText).find();
  }

  public static void main(String[] args) throws IOException {

    ResumeParser resumeParser = new ResumeParser();
    // Creating a File object for directory
    ClassLoader classLoader = App.class.getClassLoader();
    File directoryPath =
        new File(Objects.requireNonNull(classLoader.getResource("Resumes")).getFile());
    // List of all files and directories
    File[] filesList = directoryPath.listFiles();
    if (null == filesList || filesList.length == 0) {
      System.err.println("No files found to parse, at " + directoryPath);
      return;
    }
    List<ObjectNode> experienceObjectList = new ArrayList<>();
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.configure(SerializationFeature.INDENT_OUTPUT, true);
    System.out.println("Parsing resumes...");
    for (File file : filesList) {
      InputStream targetStream = new FileInputStream(file);
      try (XWPFDocument doc = new XWPFDocument(Objects.requireNonNull(targetStream))) {
        List<String> textList = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        List<XWPFParagraph> list = doc.getParagraphs();
        for (XWPFParagraph paragraph : list) {
          String lowerCaseText = StringUtils.lowerCase(paragraph.getText());
          if (textMatchesPattern(lowerCaseText)) {
            textList.add(sb.toString());
            sb = new StringBuilder();
          }
          sb.append(lowerCaseText);
        }
        if (sb.length() > 0) {
          textList.add(sb.toString());
        }
        final ArrayNode skillArray = objectMapper.createArrayNode();
        textList.stream()
            .map(resumeParser::parseResume)
            .filter(Optional::isPresent)
            .map(Optional::get)
            .flatMap(List::stream)
            .map(e -> writeValueAsString(objectMapper, e))
            .forEach(skillArray::add);

        final ObjectNode experienceObject = objectMapper.createObjectNode();
        //
        // It is similar to map put method. put method is overloaded to accept different types of
        // data String as field value
        //
        experienceObject.put("location", file.getAbsolutePath());
        experienceObject.put("skills", skillArray);
        experienceObjectList.add(experienceObject);
      } catch (IOException e) {
        System.err.println("Error reading file " + e.getMessage());
      }
    }
    System.out.println("Finished parsing resumes...");
    System.out.println("Writing parsed data...");
    objectMapper.writeValue(Paths.get("experiences.json").toFile(), experienceObjectList);
    System.out.println("Finished");
  }
}
